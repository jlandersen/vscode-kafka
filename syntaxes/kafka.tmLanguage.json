{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "kafka",
    "fileTypes": [
        ".kafka"
    ],
    "scopeName": "source.kafka",
    "injections": {
        "L:support.type.property-name.json, L:string.quoted.double.json, L:meta.structure.dictionary.value.json": {
            "comment": "Mustache patterns to inject the support.type.property-name.json, string.quoted.double.json and meta.structure.dictionary.value.json scopes",
            "patterns": [
                {
                    "include": "source.kafka#kafka.value.mustache.variables"
                }
            ]
        }
    },
    "patterns": [
        {
            "include": "#kafka.producer"
        },
        {
            "include": "#kafka.consumer"
        },
        {
            "include": "#kafka.separator"
        },
        {
            "include": "#kafka.commentline"
        }
    ],
    "repository": {
        "kafka.consumer": {
            "begin": "(?i)^(consumer)\\s*([\\S\\s]*)?$",
            "end": "(?=.)",
            "name": "meta.consumer.kafka",
            "applyEndPatternLast": 1,
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.consumer.kafka"
                },
                "2": {
                    "name": "entity.name.type.consumer.kafka"
                }
            },
            "patterns": [
                {
                    "include": "#kafka.consumer.header"
                },
                {
                    "include": "#kafka.commentline"
                }
            ]
        },
        "kafka.consumer.header": {
            "begin": "(?i)^(?:(topic|key-format|value-format|from|partitions))",
            "end": "$",
            "name": "meta.consumer.header.kafka",
            "beginCaptures": {
                "1": {
                    "name": "support.type.property-name.kafka"
                }
            },
            "patterns": [
                {
                    "begin": ":",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.separator.consumer.header.kafka"
                        }
                    },
                    "end": "$",
                    "name": "meta.consumer.header.value.kafka",
                    "patterns": [
                        {
                            "include": "#kafka.value.mustache.variables"
                        }
                    ]
                }
            ]
        },
        "kafka.producer": {
            "begin": "(?i)^(producer)\\s*([\\S\\s]*)?$",
            "end": "(?=^###)",
            "name": "meta.producer.kafka",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.producer.kafka"
                },
                "2": {
                    "name": "entity.name.type.producer.kafka"
                }
            },
            "patterns": [
                {
                    "include": "#kafka.producer.header"
                },
                {
                    "include": "#kafka.commentline"
                },
                {
                    "include": "#kafka.producer.body"
                }
            ]
        },
        "kafka.producer.header": {
            "begin": "(?i)^(?:(topic|key-format|value-format|key|headers))",
            "end": "$",
            "name": "meta.producer.header.kafka",
            "beginCaptures": {
                "1": {
                    "name": "support.type.property-name.kafka"
                }
            },
            "patterns": [
                {
                    "begin": ":",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.separator.header.key-value.kafka"
                        }
                    },
                    "end": "$",
                    "name": "meta.producer.header.value.kafka",
                    "patterns": [
                        {
                            "include": "#kafka.value.mustache.variables"
                        }
                    ]
                }
            ]
        },
        "kafka.producer.body": {
            "begin": "(?=.)",
            "while": "^(?!###.*)",
            "name": "meta.producer.body.kafka",
            "patterns": [
                {
                    "include": "#kafka.value.mustache.variables"
                },
                {
                    "include": "#kafka.value.json"
                }
            ]
        },
        "kafka.value.mustache.variables": {
            "comment": "Syntax coloration for Mustache tag variables used by fakerjs (ex : {{random.uuid}} )",
            "patterns": [
                {
                    "begin": "\\s*\\{\\{",
                    "end": "\\s*\\}\\}",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.variables.begin.mustache"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.variables.end.mustache"
                        }
                    },
                    "name": "entity.name.tag.variables.mustache"
                }
            ]
        },
        "kafka.value.json": {
            "patterns": [
                {
                    "begin": "\\s*(?=(\\[|{[^{]))",
                    "end": "\\s*(?=(\\]|}[^}}))",
                    "include": "source.json"
                }
            ]
        },
        "kafka.separator": {
            "patterns": [
                {
                    "name": "keyword.other.separator",
                    "match": "^###.*$"
                }
            ]
        },
        "kafka.commentline": {
            "patterns": [
                {
                    "name": "comment.line.hash",
                    "match": "^--.*"
                }
            ]
        }
    }
}
